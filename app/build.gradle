apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: com.walker.buildsrc.hotfix.HotfixPlugin

def androidID = rootProject.ext.androidID

android {
    signingConfigs {
        keySign {
            storeFile file('/Users/walker/develop/Android/DripStone/keystore/drip.jks')
            storePassword 'drip1234'
            keyAlias 'drip'
            keyPassword 'drip1234'
        }
    }
    compileSdkVersion androidID.compileSdkVersion
    defaultConfig {
        multiDexEnabled true
        applicationId appID.app
        minSdkVersion androidID.minSdkVersion
        targetSdkVersion androidID.targetSdkVersion
        versionCode androidID.versionCode
        versionName androidID.versionName
        // 组件化 和 集成化
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))

        externalNativeBuild {
            cmake {
                // cppFlags "" // 默认五大平台
                // 指定CPU架构，Cmake的本地库， 例如：VoiceChange ---> armeabi-v7a
                abiFilters 'armeabi-v7a' , 'arm64-v8a'
            }
        }

        // 指定CPU架构，打入APK lib/CPU平台
        ndk {
            abiFilters 'armeabi-v7a' , 'arm64-v8a'
        }
        signingConfig signingConfigs.keySign
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled true
    }
    ndkVersion '21.1.6352462'
}

HotfixExt {
    open false
    onDebug true
    applicationName 'com.walker.dripstone.GlobalApplication'
    fixPrefix["com.walker."]
}

apply plugin: 'aop.lancet.plugin'
apply plugin: 'check.native.plugin'
apply plugin: 'aop.opthread.plugin'
apply plugin: 'aop.opimage.plugin'
apply plugin: 'aop.antishake.plugin'

buildscript {
    repositories {
        google()
        jcenter()
        //自定义插件maven地址
        maven { url '../repo/walker_lancet_repo' }
        maven { url '../repo/privacy_repo' }
        maven { url '../repo/aop_optimize_repo' }
    }
    dependencies {
        //加载自定义插件 group + module + version
        //classpath 'com.walker.lancet:lancet-plugin:1.0.1'
        classpath 'io.github.singlewolf:lancet-plugin:1.0.0'
        classpath 'com.walker.plugin:privacy:1.0.0'
        classpath 'com.walker.plugin:aop_optimize_plugin:1.0.4'
    }
}

PrivacyExt{
    enable64Bit true
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.ext.kotlin_version"
    implementation "androidx.appcompat:appcompat:$rootProject.ext.androidx_version"
    implementation "androidx.multidex:multidex:$rootProject.ext.multidex_version"
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraint_layout_verson"
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'androidx.startup:startup-runtime:1.0.0-alpha01'

    implementation project(':common')
    implementation project(':network')
    implementation project(':platform')
    if (isRelease) {
        // 依附app壳
        implementation project(':webview')
        implementation project(':ui')
        implementation project(':optimize')
        implementation project(':collect')
        implementation project(':demo')
        implementation project(':study')
        implementation project(':usercenter')
    }
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.kotlin_coroutines_version"
    implementation 'q.rorbin:badgeview:1.1.3'
    //leakcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
    implementation 'io.github.singlewolf:lancet-base:1.0.1'
}

//Build构件过程
gradle.taskGraph.whenReady {
    it.allTasks.each {
        task ->
            println("---- Task name : ${task.name}")
            task.dependsOn.each {
                t ->
                    println "   ----- Class : ${t.class}"
            }
            //def outputFileStr = task.outputs.files.getAsPath();
            //def inputFileStr = task.inputs.files.getAsPath();
    }
}